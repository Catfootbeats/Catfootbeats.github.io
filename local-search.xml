<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>笔电安装openSUSE折腾NVIDIA驱动</title>
    <link href="/2024/11/23/%E7%AC%94%E7%94%B5%E5%AE%89%E8%A3%85openSUSE%E6%8A%98%E8%85%BENVIDIA%E9%A9%B1%E5%8A%A8/"/>
    <url>/2024/11/23/%E7%AC%94%E7%94%B5%E5%AE%89%E8%A3%85openSUSE%E6%8A%98%E8%85%BENVIDIA%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="笔电安装openSUSE折腾NVIDIA驱动"><a href="#笔电安装openSUSE折腾NVIDIA驱动" class="headerlink" title="笔电安装openSUSE折腾NVIDIA驱动"></a>笔电安装openSUSE折腾NVIDIA驱动</h1><p>安装驱动<a href="https://zh.opensuse.org/SDB:NVIDIA_%E9%A9%B1%E5%8A%A8">SDB:NVIDIA_驱动</a></p><p>配置独显<a href="https://zh.opensuse.org/SDB:NVIDIA_PRIME_Render_Offload">SDB:NVIDIA PRIME Render Offload</a></p><p>装上显卡驱动之后发现笔电的HDMI接口不能输出了（Wayland），但是x11可以输出。</p><p>x11显示器输出并不可以单独调整dpi。</p><p>为了单独修改dpi，只能使用Wayland。</p><p>解决HDMI输出问题就要使用Offload来调用独显输出，安全模式还要配置一下NVIDIA驱动的密钥。</p><p>使用Offload需要在内核参数里面加一条<code>nvidia-drm.modeset=1</code></p><p>然后就能使用独显输出的HDMI接口了。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>驱动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Real-Time Rendering 4th Edition 阅读笔记0 图形渲染管线</title>
    <link href="/2024/02/14/Real-Time-Rendering-4th-Edition-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B00-%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/"/>
    <url>/2024/02/14/Real-Time-Rendering-4th-Edition-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B00-%E5%9B%BE%E5%BD%A2%E6%B8%B2%E6%9F%93%E7%AE%A1%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="Real-Time-Rendering-4th-Edition-阅读笔记0-图形渲染管线"><a href="#Real-Time-Rendering-4th-Edition-阅读笔记0-图形渲染管线" class="headerlink" title="Real-Time Rendering 4th Edition 阅读笔记0 图形渲染管线"></a>Real-Time Rendering 4th Edition 阅读笔记0 图形渲染管线</h1><p>看了看 Real-Time Rendering 4th Edition ，姑且写一些不是很准确的理解，做参考。若有错误，欢迎指正。</p><h2 id="图形渲染管线"><a href="#图形渲染管线" class="headerlink" title="图形渲染管线"></a>图形渲染管线</h2><p>图形渲染管线（Graphics Rendering Pipeline，简称GPU）是图形处理器（Graphics Processing Unit，简称GPU）上执行的指令序列，用于将3D场景转换为2D图像。图形渲染管线由一系列的阶段（Stage）组成，每个阶段执行不同的任务。（以上为AI生成，我懒得写了）</p><p>如同福特把流水线引入汽车制造，图形渲染管线是为了计算图形而引入的一套流水线。这套流水线在这本书中主要有四个主要阶段：</p><ol><li><p>应用阶段（Application）</p></li><li><p>几何处理阶段（Geometry Processing）</p></li><li><p>光栅化阶段（Rasterization）</p></li><li><p>像素处理阶段（Pixel Processing）也叫片元处理阶段（Fragment Processing）</p></li></ol><h3 id="应用阶段"><a href="#应用阶段" class="headerlink" title="应用阶段"></a>应用阶段</h3><p>应用阶段主要发生在CPU上，开发者对此阶段的控制是相对自由的。有一些任务也可以在GPU上运行。即通过使⽤⼀个叫<br>做计算着⾊器（compute shader）的独⽴模式，该模式会将 GPU 视为⼀个⾼度并⾏<br>的通⽤处理器，⽽忽略其专⻔⽤于图形渲染的特殊功能。</p>]]></content>
    
    
    <categories>
      
      <category>Real-Time Rendering 4th Edition 读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图形学</tag>
      
      <tag>渲染管线</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片加密</title>
    <link href="/2023/08/24/%E5%9B%BE%E7%89%87%E5%8A%A0%E5%AF%86/"/>
    <url>/2023/08/24/%E5%9B%BE%E7%89%87%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<p>想试试用MAUI写点东西，于是有了这个。</p><p>搞了半天Skia图形库，.NET自带的Bitmap不支持跨平台。</p><p>但是MAUI不是很好用，有时间试试Compose。</p><p>可以加密涩图，但是效率不高。</p><p><a href="https://github.com/Catfootbeats/Image-Encryption">项目地址</a></p><h1 id="Image-Encryption"><a href="#Image-Encryption" class="headerlink" title="Image-Encryption"></a>Image-Encryption</h1><p align="center">  <br><br>  <img width="33.3%" src="/img/blogs/Image-Encryption/example.jpg">  <img width="33.3%" src="/img/blogs/Image-Encryption/example_0.jpg">  <br><br><br><br></p><p>没有Mac，懒得配置Github Actions。Mac和ios就自己编译罢。</p><p>图标不会画，就这样罢就。</p>]]></content>
    
    
    
    <tags>
      
      <tag>MAUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个整活弹幕射击游戏-暴打老V</title>
    <link href="/2023/08/24/%E4%B8%80%E4%B8%AA%E6%95%B4%E6%B4%BB%E5%BC%B9%E5%B9%95%E5%B0%84%E5%87%BB%E6%B8%B8%E6%88%8F-%E6%9A%B4%E6%89%93%E8%80%81V/"/>
    <url>/2023/08/24/%E4%B8%80%E4%B8%AA%E6%95%B4%E6%B4%BB%E5%BC%B9%E5%B9%95%E5%B0%84%E5%87%BB%E6%B8%B8%E6%88%8F-%E6%9A%B4%E6%89%93%E8%80%81V/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Catfootbeats/HenianSB_STG">项目地址</a></p><p>感谢 TCP 大佬为项目加入 toml 和 CI&#x2F;CD 构建系统。</p><h1 id="HenianSB-STG"><a href="#HenianSB-STG" class="headerlink" title="HenianSB STG"></a>HenianSB STG</h1><p align="center">  <br><br>  <img width="33.3%" src="/img/blogs/heniansb/heniansb.jpg">  <br><br><br><br></p><p>天依的一款弹幕设计游戏，使用Python和Pygame开发</p><p><strong>仅供娱乐！！！！！！！</strong></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>此项目支持 x86-64 架构的 Windows、Linux、MacOS 操作系统，暂不支持 ARM 架构的设备 (M1&#x2F;M2 的 Apple 设备可以使用转译)。</p><p>请前往 GitHub Release 页面下载最新版本的安装包。</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>开发环境要求：</p><ul><li>Python 3.9～3.11</li><li>PDM 2.8.x</li></ul><p>您可以运行以下命令安装 PDM：</p><p><strong>Linux&#x2F;MacOS</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -sSL https://pdm.fming.dev/install-pdm.py | python3 -<br></code></pre></td></tr></table></figure><p><strong>Windows (PowerShell)</strong></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">(<span class="hljs-built_in">Invoke-WebRequest</span> <span class="hljs-literal">-Uri</span> https://pdm.fming.dev/<span class="hljs-built_in">install-pdm</span>.py <span class="hljs-literal">-UseBasicParsing</span>).Content | python -<br></code></pre></td></tr></table></figure><p>请在 PowerShell 中运行上述命令，不要在 cmd 中运行。</p><p>然后您需要安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/Catfootbeats/HenianSB_STG.git<br>cd HenianSB_STG<br>pdm install<br></code></pre></td></tr></table></figure><p>您可以使用以下命令运行游戏：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pdm run start<br></code></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>您可以使用以下命令编译游戏：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pdm run build<br></code></pre></td></tr></table></figure><p>编译后的文件位于 <code>dist</code> 文件夹中，由于 pyinstaller 不支持交叉编译，故只能编译当前平台的可执行文件。</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vsinger</tag>
      
      <tag>整活</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscode CMake vcpkg 配置SDL2和spdlog踩的亿些坑</title>
    <link href="/2022/12/30/vscode-CMake-vcpkg-%E9%85%8D%E7%BD%AESDL2%E5%92%8Cspdlog%E8%B8%A9%E7%9A%84%E4%BA%BF%E4%BA%9B%E5%9D%91/"/>
    <url>/2022/12/30/vscode-CMake-vcpkg-%E9%85%8D%E7%BD%AESDL2%E5%92%8Cspdlog%E8%B8%A9%E7%9A%84%E4%BA%BF%E4%BA%9B%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="vscode-CMake-vcpkg-配置SDL2和spdlog踩的亿些坑"><a href="#vscode-CMake-vcpkg-配置SDL2和spdlog踩的亿些坑" class="headerlink" title="vscode CMake vcpkg 配置SDL2和spdlog踩的亿些坑"></a>vscode CMake vcpkg 配置SDL2和spdlog踩的亿些坑</h1><h2 id="配置过程，讲讲Windows，Linux就方便多了用系统的包管理器直接装就行"><a href="#配置过程，讲讲Windows，Linux就方便多了用系统的包管理器直接装就行" class="headerlink" title="配置过程，讲讲Windows，Linux就方便多了用系统的包管理器直接装就行"></a>配置过程，讲讲Windows，Linux就方便多了用系统的包管理器直接装就行</h2><h3 id="vcpkg"><a href="#vcpkg" class="headerlink" title="vcpkg"></a>vcpkg</h3><p>先照着GitHub上vcpkg的官方教程安装vcpkg，再打开vscode，<code>Ctrl</code> + <code>Shift</code> + <code>P</code> 输入 <code>setting.json</code> 打开用户配置，加一条</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;cmake.configureSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">/*指定vcpkg路径*/</span><br>    <span class="hljs-attr">&quot;CMAKE_TOOLCHAIN_FILE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;你的vcpkg安装路径&#125;/scripts/buildsystems/vcpkg.cmake&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    指定要使用的包版本，这个和编译器有关</span><br><span class="hljs-comment">    如果你用的是MSVC就改成 `x64-windows`</span><br><span class="hljs-comment">    Clang不清楚，具体可以看vcpkg的文档 </span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-attr">&quot;VCPKG_TARGET_TRIPLET&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;x64-mingw-static&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>（你一定装了CMake插件了吧</p><blockquote><h4 id="vscode小技巧"><a href="#vscode小技巧" class="headerlink" title="vscode小技巧"></a>vscode小技巧</h4><p>比如我不想让 <code>cmake.configureSettings</code> 同步就可以写</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;settingsSync.ignoredSettings&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-string">&quot;cmake.configureSettings&quot;</span>    <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="装SDL2"><a href="#装SDL2" class="headerlink" title="装SDL2"></a>装SDL2</h3><p>终端输入 </p><p><code>vcpkg install SDL2:x64-mingw-static</code></p><p>前提是你设置了vcpkg的环境变量</p><p>这里可以根据你需要的配置写</p><p>装好之后vcpkg会提示CMake的配置</p><p>但是很可惜，光有这个是不能用的。正确的配置是</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">find_package</span>(SDL2 CONFIG REQUIRED)<br><br><span class="hljs-keyword">target_link_libraries</span>(<br>    <span class="hljs-variable">$&#123;PROJECT_NAME&#125;</span><br>    PRIVATE<br>    <span class="hljs-variable">$&#123;SDL2_LIBRARIES&#125;</span><br>    SDL2::SDL2main<br>    SDL2::SDL2<br>)<br></code></pre></td></tr></table></figure><p>这里需要显式引入SDL2的库。</p><p>spdlog的话直接用vcpkg给的配置就可以了。</p><blockquote><p>p.s.</p><p>如果你碰到什么线程之类的编译错误，需要装个posix的MinGW</p><p>之前用的官方的办法直接 <code>include(sdl2-config.cmake)</code>，后面试了git子模块的办法和vcpkg两种办法引入了spdlog库，结果CMake和gcc编译没有任何报错，但是控制台都不能输出log</p><p>后来在互联网的一个小角落找到了vcpkg无法引入SDL2的解决办法，引入了之后莫名其妙解决了上面的问题。</p><p>也许这就是传说中的 Windows Magic 吧 (～￣▽￣)～</p></blockquote><h3 id="如果你用clangd作为vscode的lsp（老色批）Windows下就可能会发现提示找不到-strings-h"><a href="#如果你用clangd作为vscode的lsp（老色批）Windows下就可能会发现提示找不到-strings-h" class="headerlink" title="如果你用clangd作为vscode的lsp（老色批）Windows下就可能会发现提示找不到 strings.h"></a>如果你用clangd作为vscode的lsp（<del>老色批</del>）Windows下就可能会发现提示找不到 <code>strings.h</code></h3><p>直接跳转到对应的SDL2 <code>#include &lt;strings.h&gt;</code> 直接注释掉即可</p><p>下面全部作废：</p><p>clangd找不到你编译器的库，这里需要手动告诉它。</p><p>在vscode的设置里面找到clangd，在Argument项目里面写上 <code>--include-dir=&#123;你的mingw位置&#125;/x86_64-w64-mingw32/include</code></p><blockquote><p>鼠标放到Argument上面点出现的小齿轮可以设置这项是否同步</p></blockquote><p>重启就修复了</p><blockquote><p>p.s.讲讲这个问题解决的过程</p><p>最开始找到说要在 Fallback Flags 加 <code>-I&#123;路径&#125;</code></p><p>这个I试过小写l和大写I结果都不行</p><p>最后还是在官方文档找到了这一行</p><blockquote><p>List of flags to remove from the compile command.</p><ul><li>If the value is a recognized clang flag (like <code>-I</code>) then it will be removed along with any arguments. Synonyms like <code>--include-dir=</code> will also be removed.</li></ul></blockquote><p>虽然看不懂，但是反正试试，结果成功了</p><p>还得看官方文档~</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>试试写一个galgame引擎</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>VSCode</tag>
      
      <tag>vcpkg</tag>
      
      <tag>SDL2</tag>
      
      <tag>spdlog</tag>
      
      <tag>clangd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些写的小曲儿</title>
    <link href="/2022/12/24/%E4%B8%80%E4%BA%9B%E5%86%99%E7%9A%84%E5%B0%8F%E6%9B%B2%E5%84%BF/"/>
    <url>/2022/12/24/%E4%B8%80%E4%BA%9B%E5%86%99%E7%9A%84%E5%B0%8F%E6%9B%B2%E5%84%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="一些写的小曲儿"><a href="#一些写的小曲儿" class="headerlink" title="一些写的小曲儿"></a>一些写的小曲儿</h1><p>从之前的<a href="https://static-8e0cd920-f7af-4c09-80a6-c43f63e965b5.bspapp.com/">博客</a>（一个把下载的网页模板修修补补整的东西，部署在uniCloud上）搬过来的。</p><p><font color=#FF0000>未经授权，严禁转载。</font></p><p>请您汀汀</p><h2 id="炸厕所"><a href="#炸厕所" class="headerlink" title="炸厕所"></a>炸厕所</h2><p>很燃的那种</p><audio controls>    <source src="/music/kill wc/kill wc.mp3" type="audio/mp3">    您的浏览器太老了w(ﾟДﾟ)w</audio><audio controls>    <source src="/music/kill wc/Mixdown(6).mp3" type="audio/mp3">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="一种偏向。？琵琶？传统？"><a href="#一种偏向。？琵琶？传统？" class="headerlink" title="一种偏向。？琵琶？传统？"></a>一种偏向。？琵琶？传统？</h2><p>但是又有电吉他的</p><audio controls>    <source src="/music/pipadianjita/Mixdown(12).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><audio controls>    <source src="/music/pipadianjita/Mixdown(11).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio>    <audio controls>    <source src="/music/pipadianjita/Mixdown(5).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="之前给我的一个朋友私下做的游戏写的"><a href="#之前给我的一个朋友私下做的游戏写的" class="headerlink" title="之前给我的一个朋友私下做的游戏写的"></a>之前给我的一个朋友私下做的游戏写的</h2><p>不过那玩意一堆bug(￣_,￣ )，</p><p>歌还是挺好听的</p><audio controls>  <source src="/music/game/Mixdown.mp3" type="audio/mp3">  您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="送别的Remix"><a href="#送别的Remix" class="headerlink" title="送别的Remix"></a>送别的Remix</h2><audio controls>    <source src="/music/songbieremix/Mixdown.wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="乡村音乐"><a href="#乡村音乐" class="headerlink" title="乡村音乐"></a>乡村音乐</h2><audio controls>    <source src="/music/country music/Mixdown(2).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><audio controls>    <source src="/music/country music/Mixdown(3).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="有点唬人的古风"><a href="#有点唬人的古风" class="headerlink" title="有点唬人的古风"></a>有点唬人的古风</h2><audio controls>    <source src="/music/gufeng/Mixdown.wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="Country-Music-大雾"><a href="#Country-Music-大雾" class="headerlink" title="Country Music(大雾"></a>Country Music(大雾</h2><p>手机清灰请外放并且声音最大（注意身边有无其他人，社死后果自负</p><p>请保护好您的耳朵。</p><audio controls>    <source src="/music/tuhai/加强黄金版土嗨金曲.wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="来点阴间的（x"><a href="#来点阴间的（x" class="headerlink" title="来点阴间的（x"></a>来点阴间的（x</h2><audio controls>    <source src="/music/yinyue/阴乐.wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><audio controls>    <source src="/music/yinyue/Mixdown(2).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="带一种思乡感觉的曲"><a href="#带一种思乡感觉的曲" class="headerlink" title="带一种思乡感觉的曲"></a>带一种思乡感觉的曲</h2><audio controls>    <source src="/music/sixiang/Mixdown(6).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="以及日式改版（鬼子进村儿"><a href="#以及日式改版（鬼子进村儿" class="headerlink" title="以及日式改版（鬼子进村儿"></a>以及日式改版（鬼子进村儿</h2><audio controls>    <source src="/music/sixiang/鬼子进村儿.wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="有点像番剧配音，轻快又沉稳"><a href="#有点像番剧配音，轻快又沉稳" class="headerlink" title="有点像番剧配音，轻快又沉稳"></a>有点像番剧配音，轻快又沉稳</h2><audio controls>    <source src="/music/fanjv/Mixdown.wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><audio controls>    <source src="/music/fanjv/Mixdown(2).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="有点梦幻的"><a href="#有点梦幻的" class="headerlink" title="有点梦幻的"></a>有点梦幻的</h2><audio controls>    <source src="/music/menghuan/Mixdown.wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><audio controls>    <source src="/music/menghuan/Mixdown(2).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><audio controls>    <source src="/music/menghuan/Mixdown(3).wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="有点嘤国传统平民歌曲的感觉"><a href="#有点嘤国传统平民歌曲的感觉" class="headerlink" title="有点嘤国传统平民歌曲的感觉"></a>有点嘤国传统平民歌曲的感觉</h2><audio controls>    <source src="/music/English/Mixdown.wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><audio controls>    <source src="/music/English/guitar.wav" type="audio/wav">    您的浏览器太老了w(ﾟДﾟ)w</audio><h2 id="既然都看到这里了，奖励你涩涩！"><a href="#既然都看到这里了，奖励你涩涩！" class="headerlink" title="既然都看到这里了，奖励你涩涩！"></a>既然都看到这里了，奖励你涩涩！</h2><p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p>马上就有了哦~</p><p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p>我知道你很急，你先别急。</p><p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><p align="center">  <br><br>  <img width="33.3%" src="/video/rick/1.jpg">  <br><br><br><br></p>]]></content>
    
    
    <categories>
      
      <category>Music!</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音乐</tag>
      
      <tag>编曲</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>neovim配置</title>
    <link href="/2022/12/23/neovim%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/12/23/neovim%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="neovim配置"><a href="#neovim配置" class="headerlink" title="neovim配置"></a>neovim配置</h1><p><a href="https://github.com/Catfootbeats/nvim">配置地址</a></p><h1 id="插件"><a href="#插件" class="headerlink" title="#插件"></a>#插件</h1><ul><li><p>更新安装 PackerSync</p></li><li><p>卸载插件 把要卸载的插件注释或者删除掉 PackerClean</p></li></ul><h1 id="操作指南"><a href="#操作指南" class="headerlink" title="#操作指南"></a>#操作指南</h1><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><ul><li><p>保存 <code>Ctrl + S</code></p></li><li><p>退出 <code>Ctrl + Q</code></p></li><li><p>插入模式光标移动</p><p>左 <code>Ctrl + [</code></p><p>右 <code>Ctrl + ]</code></p><p>上 <code>Ctrl + P</code></p><p>下 <code>Ctrl + N</code></p></li><li><p>退出插入模式 <code>jk</code></p></li><li><p><code>Alt + hjkl</code>选择窗口</p></li><li><p><code>s v/h</code> 分屏</p></li><li><p><code>s c</code> 关闭分屏</p></li></ul><h4 id="自动补全cmp"><a href="#自动补全cmp" class="headerlink" title="自动补全cmp"></a>自动补全cmp</h4><ul><li><p><code>Ctrl + j k</code> 上下移动</p></li><li><p><code>Ctrl + f b</code> 滚动描述窗口大小</p></li><li><p><code>Ctrl + Space</code> 好像不管用</p></li><li><p><code>Ctrl + e</code> 关闭边栏</p></li><li><p>回车确认</p></li><li><p><code>tab</code> 比如，确认之后，出现一个方法的模板，填充完名称按Tab跳转到参数，再按跳转到代码块</p></li></ul><p>设置请到 <code>cmp.lua</code></p><ul><li><p><code>formatting</code> 可调整弹出的窗口 <code>source</code> 改变顺序</p></li><li><p><code>ghosttext</code> 水印提示</p></li></ul><h4 id="LSP"><a href="#LSP" class="headerlink" title="LSP"></a>LSP</h4><ul><li><p><code>:LspInstall</code> 安装的lsp server</p></li><li><p><code>Shift + K</code> 相当于悬停</p></li><li><p><code>gd</code> 走到定义</p></li><li><p><code>gD</code> 走到声明</p></li><li><p><code>gi</code> 走到实现</p></li><li><p><code>Ctrl + k</code> 签名帮助(?)</p></li><li><p><code>gr</code> 引用</p></li><li><p><code>[d</code> <code>]d</code> 前后报错</p></li><li><p><code>&lt;loader&gt;q</code> 错误列表(<loader>目前设置为<code>\</code>)</p></li><li><p><code>&lt;loader&gt;ca</code> 快速修复</p></li><li><p><code>&lt;loader&gt;rn</code> 重命名</p></li><li><p>添加语言支持在 <code>mason.lua</code> 的server加，使用 <code>:LspInstall &lt;server&gt;</code> 命令安装，在settings里面添加设置。</p><p>具体见<a href="https://github.com/williamboman/mason-lspconfig.nvim">mason-lspconfig.nvim</a>,<a href="https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md">设置</a></p><p><code>cmd = &#123;DATA_PATH .. &#39;/lspinstall/cmake/venv/bin/&lt;server&gt;&#39;&#125;</code>添加的cmd大概写成这样,文件名不行就试试后面加-ls</p></li><li><p>注：C#提示依赖Visual Studio工程文件</p><p>C++需要导出数据库 <code>cmake -S ./ -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=1</code></p></li></ul><h4 id="CMake相关快捷键"><a href="#CMake相关快捷键" class="headerlink" title="CMake相关快捷键"></a>CMake相关快捷键</h4><ul><li><code>&lt;leader&gt;&lt;leader&gt;s</code> <code>cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=1</code></li><li><code>&lt;leader&gt;&lt;leader&gt;b</code> <code>cmake --build build -j2</code></li><li><code>&lt;leader&gt;&lt;leader&gt;t</code> <code>cmake --build build -j2 --target test</code></li></ul><h4 id="查找功能"><a href="#查找功能" class="headerlink" title="查找功能"></a>查找功能</h4><ul><li><code>&lt;leader&gt;ff</code> 查找文件</li><li><code>&lt;leader&gt;fg</code> 查找片段</li><li><code>&lt;leader&gt;fb</code> 在打开的文件里面查找</li><li><code>&lt;leader&gt;fh</code> 查找帮助文档</li><li><code>&lt;leader&gt;sf</code></li><li><code>&lt;leader&gt;/</code> 不知道有啥意义</li><li>lua\user\plugin-config\telescope.lua 自己看罢(</li></ul><h4 id="Debugger"><a href="#Debugger" class="headerlink" title="Debugger"></a>Debugger</h4><ul><li>DIInstall <code>Tab</code> 安装 DIList 验证</li></ul><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p><code>&lt;leader&gt;py</code> 运行python</p></li><li><p>在文件浏览器按<code>s</code>可以运行程序</p></li><li><p>Linux或者OSX可以安装 <code>lolcat</code> 去 <code>dashboard.lua</code> 开启彩虹首页</p></li><li><p>可在项目目录里面创建一个 <code>run.bat</code> 或者 <code>run.sh</code> ,使用 <code>&lt;leader&gt;&lt;leader&gt;r</code> 运行</p></li><li><p><code>:checkhealth</code> 检查是否配置完成</p></li><li><p><code>;</code> 或者普通模式 <code>ff</code> 格式化代码</p></li><li><p><code>Ctrl + \</code> 打开终端 Windows Terminal也可以直接 <code>Win + 飘号键</code> 打开Windows Terminal自带的终端</p></li><li><p>Gitsigns命令 git功能</p></li><li><p><code>gcc</code>注释</p></li><li><p><a href="https://github.com/simrat39/symbols-outline.nvim">文件大纲</a> <code>&lt;leader&gt;o</code> 开启关闭大纲</p></li><li><p>命令模式输入Tab提示</p></li><li><p><code>Enter</code>增量选择 <code>Backspace</code>减量选择</p></li><li><p>代码格式化 <code>=</code> 全部格式化 <code>ggvG=</code> or <code>gg=G</code></p></li><li><p>折叠代码 <code>zc</code> <code>zo</code></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>neovim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake,VSCode,vcpkg配置Vulkan开发环境</title>
    <link href="/2022/12/03/CMake-VSCode-vcpkg%E9%85%8D%E7%BD%AEVulkan%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/12/03/CMake-VSCode-vcpkg%E9%85%8D%E7%BD%AEVulkan%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="CMake-VSCode-vcpkg配置Vulkan开发环境"><a href="#CMake-VSCode-vcpkg配置Vulkan开发环境" class="headerlink" title="CMake, VSCode, vcpkg配置Vulkan开发环境"></a>CMake, VSCode, vcpkg配置Vulkan开发环境</h1><p>首先需要配置好VSCode, vcpkg, CMake以及编译器。</p><p>VSCode需要安装CMake, CMake Tools插件。</p><h2 id="CMake基础配置"><a href="#CMake基础配置" class="headerlink" title="# CMake基础配置"></a># CMake基础配置</h2><ul><li><p>按 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> ，选择CMake配置，选择你所使用的编译器，或者点击 <code>Scan for kits</code> 搜索已安装的编译器。</p></li><li><p>按 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> ，选择C&#x2F;C++配置，配置编译器和标准。</p></li><li><p>选择后右下角询问是否创建CMake文件，点击 <code>Create</code> 创建。创建过程中会询问项目名称，项目类型。</p></li><li><p>创建完成会自动生成一个CMakeLists.txt文件，内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span> VERSION <span class="number">0.1</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(CTest)</span><br><span class="line"><span class="keyword">enable_testing</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_NAME <span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_VERSION <span class="variable">$&#123;PROJECT_VERSION&#125;</span>)</span><br><span class="line"><span class="keyword">include</span>(CPack)</span><br></pre></td></tr></table></figure></li><li><p>使用通配符编译所有源码</p><p>在 <code>enable_testing()</code> 下面写</p><p><code>file(GLOB SOURCE_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.cpp)</code></p><p>将 <code>add_executable(test main.cpp)</code> 后面的 <code>main.cpp</code> 改成 <code>$&#123;SOURCE_PATH&#125;</code></p><blockquote><p>您也可以顺便把前面的项目名称改成 <code>$&#123;PROJECT_NAME&#125;</code></p><p>这样将绑定 <code>project()</code> 里面的项目名。</p></blockquote><p>修改完您的文件大概是这样：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span> VERSION <span class="number">0.1</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(CTest)</span><br><span class="line"><span class="keyword">enable_testing</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB SOURCE_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCE_PATH&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_NAME <span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_VERSION <span class="variable">$&#123;PROJECT_VERSION&#125;</span>)</span><br><span class="line"><span class="keyword">include</span>(CPack)</span><br></pre></td></tr></table></figure><p>保存文件将自动配置。</p></li><li><p>至此您已经完成了CMake基本配置。您可以点击下面的Build构建，点击右边的虫子或播放键编译运行。</p></li></ul><h2 id="通过vcpkg配置Vulkan"><a href="#通过vcpkg配置Vulkan" class="headerlink" title="# 通过vcpkg配置Vulkan"></a># 通过vcpkg配置Vulkan</h2><p>虽然，但是这玩意确实可以用非msvc编译器</p><ul><li><p>配置vcpkg</p><p>您需要添加个环境变量来方便使用。</p><p>找到 <code>vcpkg.exe</code> 的根目录添加进去即可。</p><p>点开VSCode的 设置 -&gt; 拓展 -&gt; CMake Tools -&gt; Configure Args -&gt;添加项</p><p>输入 <code>-DCMAKE_TOOLCHAIN_FILE=[你的vcpkg位置]/scripts/buildsystems/vcpkg.cmake</code> 确定</p></li><li><p>vcpkg安装包</p><p>使用 <code>vcpkg search [包名称]</code> 来搜索包。</p><p>使用 <code>vcpkg install [包名称][版本]</code> 来安装包。</p><p>例如：</p><p>输入 <code>vcpkg install glfw3:x64-windows</code> 安装64位Windows版本的GLFW</p><p>输入 <code>vcpkg install glm:x64-windows</code> 安装64位Windows版本的GLM</p><p>如果不输入 <code>:64-windows</code> 将默认安装x86版本。</p><blockquote><p>其他命令</p><p><code>remove [包][版本]</code> 移除包</p><p><code>list</code> 列出所有已安装的包</p></blockquote></li><li><p>CMake添加库</p><p>安装完包之后，vcpkg会给出CMake代码：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">glm provides CMake targets:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># this is heuristically generated, and may not be correct</span></span><br><span class="line">  <span class="keyword">find_package</span>(glm CONFIG REQUIRED)</span><br><span class="line">  <span class="keyword">target_link_libraries</span>(main PRIVATE glm::glm)</span><br></pre></td></tr></table></figure><p>复制进 <code>CMakeLists.txt</code> 把 <code>main</code> 修改成您的项目名称或者 <code>$&#123;PROJECT_NAME&#125;</code></p><p>保存配置，写点代码运行试试，如果不能运行可以尝试把 <code>PRIVATE</code> 删掉。</p></li><li><p>添加include目录</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_include_directories</span> (<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC</span><br><span class="line">  <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span></span><br><span class="line">  <span class="variable">$&#123;Vulkan_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>$&#123;Vulkan_INCLUDE_DIRS&#125;</code> 添加Vulkan的include目录。</p><p><code>$&#123;PROJECT_BINARY_DIR&#125;</code> 貌似写上这个 <code>#include &quot;xxx.hpp&quot;</code> 引用项目的hpp&#x2F;h文件有代码提示？</p></li></ul><h2 id="以上全部完成你的-CMakeLists-txt-大概是这样的"><a href="#以上全部完成你的-CMakeLists-txt-大概是这样的" class="headerlink" title="以上全部完成你的 CMakeLists.txt 大概是这样的"></a>以上全部完成你的 <code>CMakeLists.txt</code> 大概是这样的</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">project</span>(cmt VERSION <span class="number">0.1</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(CTest)</span><br><span class="line"><span class="keyword">enable_testing</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(glfw3 CONFIG REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Vulkan REQUIRED )</span><br><span class="line"><span class="keyword">find_package</span>(glm CONFIG REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB SOURCE_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp) </span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCE_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">target_include_directories</span> (<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC</span><br><span class="line">    <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span></span><br><span class="line">    <span class="variable">$&#123;GLFW_INCLUDE_DIRS&#125;</span></span><br><span class="line">    <span class="variable">$&#123;Vulkan_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;Vulkan_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> glfw)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> glm::glm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_NAME <span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_VERSION <span class="variable">$&#123;PROJECT_VERSION&#125;</span>)</span><br><span class="line"><span class="keyword">include</span>(CPack)</span><br></pre></td></tr></table></figure><p>如果代码报红可以试试重启VSCode</p><p>复制测试代码试试：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> GLFW_INCLUDE_VULKAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLM_FORCE_RADIANS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLM_FORCE_DEPTH_ZERO_TO_ONE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glm/vec4.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glm/mat4x4.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glfwInit</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_CLIENT_API, GLFW_NO_API);</span><br><span class="line">    GLFWwindow *window = <span class="built_in">glfwCreateWindow</span>(<span class="number">800</span>, <span class="number">600</span>, <span class="string">&quot;Vulkan window&quot;</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> extensionCount = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vkEnumerateInstanceExtensionProperties</span>(<span class="literal">nullptr</span>, &amp;extensionCount, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; extensionCount &lt;&lt; <span class="string">&quot; extensions supported\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    glm::mat4 matrix;</span><br><span class="line">    glm::vec4 vec;</span><br><span class="line">    <span class="keyword">auto</span> test = matrix * vec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwDestroyWindow</span>(window);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwTerminate</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果成功打开窗口，则配置完成。</p>]]></content>
    
    
    <categories>
      
      <category>tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>VSCode</tag>
      
      <tag>vcpkg</tag>
      
      <tag>Vulkan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Control插件</title>
    <link href="/1919/08/10/contral/"/>
    <url>/1919/08/10/contral/</url>
    
    <content type="html"><![CDATA[<h1 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h1><p>一个极其极其极其简单的基于 mirai 和 mirai-console 的聊天控制Bot的mirai-console插件<br><a href="https://github.com/Catfootbeats/mirai-contral">项目地址</a><br><a href="https://github.com/Catfootbeats/mirai-contral/releases">下载地址</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>首先在config\xyz.catfootbeats.control\Setting.yml里设置模式和主人ID<br>(设置完成后需要重启mirai-console)</p><ul><li><code>/ctrl help</code>获取帮助</li><li><code>/ctrl send &lt;消息&gt; &lt;目标群(空时为本群)&gt;</code>让Bot在&lt;目标群&gt;发送&lt;消息&gt;</li><li><code>/recall &lt;引用&gt;</code> 撤回Bot自己的消息</li></ul><p>p.s.初次尝试写插件，项目里n个if else，很多地方也很拙劣，如果有什么问题或建议还请各位大佬指出ヾ(•ω•&#96;)o</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
