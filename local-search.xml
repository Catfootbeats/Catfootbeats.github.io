<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>原子结构</title>
    <link href="/2022/12/22/%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    <url>/2022/12/22/%E5%8E%9F%E5%AD%90%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="原子结构"><a href="#原子结构" class="headerlink" title="原子结构"></a>原子结构</h1><h2 id="1-价层电子排布式"><a href="#1-价层电子排布式" class="headerlink" title="1. 价层电子排布式"></a>1. 价层电子排布式</h2><h3 id="书写方式"><a href="#书写方式" class="headerlink" title="书写方式"></a>书写方式</h3><p>轨道数量 s p d f 1 3 5 7</p><p>按照构造原理从右下角向左上方穿，从缝隙中回</p><table><thead><tr><th>能层</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Q</td><td>7s</td><td>7p</td><td></td><td></td></tr><tr><td>P</td><td>6s</td><td>6p</td><td>6d</td><td></td></tr><tr><td>O</td><td>5s</td><td>5p</td><td>5d</td><td>5f</td></tr><tr><td>N</td><td>4s</td><td>4p</td><td>4d</td><td>4f</td></tr><tr><td>M</td><td>3s</td><td>3p</td><td>3d</td><td></td></tr><tr><td>L</td><td>2s</td><td>2p</td><td></td><td></td></tr><tr><td>K</td><td>1s</td><td></td><td></td><td></td></tr></tbody></table><p>书写时顺序还原</p><p>如：Mn 1s<sup>2</sup>2s<sup>2</sup>2p<sup>6</sup>3s<sup>2</sup>3p<sup>6</sup>3d<sup>5</sup>4s<sup>2</sup></p><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><h4 id="稀有气体-价层电子"><a href="#稀有气体-价层电子" class="headerlink" title="[稀有气体] + 价层电子"></a>[稀有气体] + 价层电子</h4><p>如：Mn [Ar]3d<sup>5</sup>4s<sup>2</sup></p><h2 id="2-电子云与原子轨道"><a href="#2-电子云与原子轨道" class="headerlink" title="2. 电子云与原子轨道"></a>2. 电子云与原子轨道</h2><ul><li><code>s</code> 球形</li><li><code>p</code> 哑铃形 其中 p<sub>x</sub> p<sub>y</sub> p<sub>z</sub> 分别占一个轴</li><li><code>d</code> 梅花形</li></ul><p>不同层级取向相同，半径随层数 <code>n</code> 增大而增大。</p><p>形状大小相同而取向不同的能量相同</p><h2 id="3-三大原理"><a href="#3-三大原理" class="headerlink" title="3. 三大原理"></a>3. 三大原理</h2><h3 id="能量最低原理"><a href="#能量最低原理" class="headerlink" title="能量最低原理"></a>能量最低原理</h3><ul><li>遵循构造原理</li><li><sub>24</sub>Cr 、 <sub>29</sub>Cu 、 <sub>47</sub>Ag 、 <sub>79</sub>Au 不符合构造原理，符合洪特规则</li></ul><h3 id="泡利原理"><a href="#泡利原理" class="headerlink" title="泡利原理"></a>泡利原理</h3><ul><li>一个原子轨道最多2个电子，方向相反（方向用 <code>↑</code> <code>↓</code> 表示）</li><li>有几种电子就有几种运动状态</li></ul><h3 id="洪特规则"><a href="#洪特规则" class="headerlink" title="洪特规则"></a>洪特规则</h3><ul><li>先占轨道，方向相同</li><li>全满（p<sup>6</sup>）半满（p<sup>3</sup>）全空（p<sup>0</sup>）能量最低</li></ul><p>如：<sub>24</sub>Cr 后几位为 3d<sup>5</sup>4s<sup>1</sup> 而不是 3d<sup>4</sup>4s<sup>2</sup></p><h3 id="书写"><a href="#书写" class="headerlink" title="书写"></a>书写</h3><p>方框里面写上下箭头，方框上面写能级，同能级连到一块</p>]]></content>
    
    
    <categories>
      
      <category>化学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>化学</tag>
      
      <tag>选修三物质结构与性质</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CMake,VSCode,vcpkg配置Vulkan开发环境</title>
    <link href="/2022/12/03/CMake-VSCode-vcpkg%E9%85%8D%E7%BD%AEVulkan%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2022/12/03/CMake-VSCode-vcpkg%E9%85%8D%E7%BD%AEVulkan%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="CMake-VSCode-vcpkg配置Vulkan开发环境"><a href="#CMake-VSCode-vcpkg配置Vulkan开发环境" class="headerlink" title="CMake, VSCode, vcpkg配置Vulkan开发环境"></a>CMake, VSCode, vcpkg配置Vulkan开发环境</h1><p>首先需要配置好VSCode, vcpkg, CMake以及编译器。</p><p>VSCode需要安装CMake, CMake Tools插件。</p><h2 id="CMake基础配置"><a href="#CMake基础配置" class="headerlink" title="# CMake基础配置"></a># CMake基础配置</h2><ul><li><p>按 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> ，选择CMake配置，选择你所使用的编译器，或者点击 <code>Scan for kits</code> 搜索已安装的编译器。</p></li><li><p>按 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> ，选择C&#x2F;C++配置，配置编译器和标准。</p></li><li><p>选择后右下角询问是否创建CMake文件，点击 <code>Create</code> 创建。创建过程中会询问项目名称，项目类型。</p></li><li><p>创建完成会自动生成一个CMakeLists.txt文件，内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span> VERSION <span class="number">0.1</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(CTest)</span><br><span class="line"><span class="keyword">enable_testing</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(<span class="keyword">test</span> main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_NAME <span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_VERSION <span class="variable">$&#123;PROJECT_VERSION&#125;</span>)</span><br><span class="line"><span class="keyword">include</span>(CPack)</span><br></pre></td></tr></table></figure></li><li><p>使用通配符编译所有源码</p><p>在 <code>enable_testing()</code> 下面写</p><p><code>file(GLOB SOURCE_PATH $&#123;CMAKE_CURRENT_SOURCE_DIR&#125;/*.cpp)</code></p><p>将 <code>add_executable(test main.cpp)</code> 后面的 <code>main.cpp</code> 改成 <code>$&#123;SOURCE_PATH&#125;</code></p><blockquote><p>您也可以顺便把前面的项目名称改成 <code>$&#123;PROJECT_NAME&#125;</code></p><p>这样将绑定 <code>project()</code> 里面的项目名。</p></blockquote><p>修改完您的文件大概是这样：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">project</span>(<span class="keyword">test</span> VERSION <span class="number">0.1</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(CTest)</span><br><span class="line"><span class="keyword">enable_testing</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB SOURCE_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp)</span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCE_PATH&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_NAME <span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_VERSION <span class="variable">$&#123;PROJECT_VERSION&#125;</span>)</span><br><span class="line"><span class="keyword">include</span>(CPack)</span><br></pre></td></tr></table></figure><p>保存文件将自动配置。</p></li><li><p>至此您已经完成了CMake基本配置。您可以点击下面的Build构建，点击右边的虫子或播放键编译运行。</p></li></ul><h2 id="通过vcpkg配置Vulkan"><a href="#通过vcpkg配置Vulkan" class="headerlink" title="# 通过vcpkg配置Vulkan"></a># 通过vcpkg配置Vulkan</h2><p>虽然，但是这玩意确实可以用非msvc编译器</p><ul><li><p>配置vcpkg</p><p>您需要添加个环境变量来方便使用。</p><p>找到 <code>vcpkg.exe</code> 的根目录添加进去即可。</p><p>点开VSCode的 设置 -&gt; 拓展 -&gt; CMake Tools -&gt; Configure Args -&gt;添加项</p><p>输入 <code>-DCMAKE_TOOLCHAIN_FILE=[你的vcpkg位置]/scripts/buildsystems/vcpkg.cmake</code> 确定</p></li><li><p>vcpkg安装包</p><p>使用 <code>vcpkg search [包名称]</code> 来搜索包。</p><p>使用 <code>vcpkg install [包名称][版本]</code> 来安装包。</p><p>例如：</p><p>输入 <code>vcpkg install glfw3:x64-windows</code> 安装64位Windows版本的GLFW</p><p>输入 <code>vcpkg install glm:x64-windows</code> 安装64位Windows版本的GLM</p><p>如果不输入 <code>:64-windows</code> 将默认安装x86版本。</p><blockquote><p>其他命令</p><p><code>remove [包][版本]</code> 移除包</p><p><code>list</code> 列出所有已安装的包</p></blockquote></li><li><p>CMake添加库</p><p>安装完包之后，vcpkg会给出CMake代码：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">glm provides CMake targets:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># this is heuristically generated, and may not be correct</span></span><br><span class="line">  <span class="keyword">find_package</span>(glm CONFIG REQUIRED)</span><br><span class="line">  <span class="keyword">target_link_libraries</span>(main PRIVATE glm::glm)</span><br></pre></td></tr></table></figure><p>复制进 <code>CMakeLists.txt</code> 把 <code>main</code> 修改成您的项目名称或者 <code>$&#123;PROJECT_NAME&#125;</code></p><p>保存配置，写点代码运行试试，如果不能运行可以尝试把 <code>PRIVATE</code> 删掉。</p></li><li><p>添加include目录</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">target_include_directories</span> (<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC</span><br><span class="line">  <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span></span><br><span class="line">  <span class="variable">$&#123;Vulkan_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>$&#123;Vulkan_INCLUDE_DIRS&#125;</code> 添加Vulkan的include目录。</p><p><code>$&#123;PROJECT_BINARY_DIR&#125;</code> 貌似写上这个 <code>#include &quot;xxx.hpp&quot;</code> 引用项目的hpp&#x2F;h文件有代码提示？</p></li></ul><h2 id="以上全部完成你的-CMakeLists-txt-大概是这样的"><a href="#以上全部完成你的-CMakeLists-txt-大概是这样的" class="headerlink" title="以上全部完成你的 CMakeLists.txt 大概是这样的"></a>以上全部完成你的 <code>CMakeLists.txt</code> 大概是这样的</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>.<span class="number">0</span>)</span><br><span class="line"><span class="keyword">project</span>(cmt VERSION <span class="number">0.1</span>.<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(CTest)</span><br><span class="line"><span class="keyword">enable_testing</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">find_package</span>(glfw3 CONFIG REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(Vulkan REQUIRED )</span><br><span class="line"><span class="keyword">find_package</span>(glm CONFIG REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span>(GLOB SOURCE_PATH <span class="variable">$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;</span>/*.cpp) </span><br><span class="line"><span class="keyword">add_executable</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;SOURCE_PATH&#125;</span>)</span><br><span class="line"><span class="keyword">target_include_directories</span> (<span class="variable">$&#123;PROJECT_NAME&#125;</span> PUBLIC</span><br><span class="line">    <span class="variable">$&#123;PROJECT_BINARY_DIR&#125;</span></span><br><span class="line">    <span class="variable">$&#123;GLFW_INCLUDE_DIRS&#125;</span></span><br><span class="line">    <span class="variable">$&#123;Vulkan_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> <span class="variable">$&#123;Vulkan_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> glfw)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;PROJECT_NAME&#125;</span> glm::glm)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_NAME <span class="variable">$&#123;PROJECT_NAME&#125;</span>)</span><br><span class="line"><span class="keyword">set</span>(CPACK_PROJECT_VERSION <span class="variable">$&#123;PROJECT_VERSION&#125;</span>)</span><br><span class="line"><span class="keyword">include</span>(CPack)</span><br></pre></td></tr></table></figure><p>如果代码报红可以试试重启VSCode</p><p>复制测试代码试试：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> GLFW_INCLUDE_VULKAN</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLM_FORCE_RADIANS</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLM_FORCE_DEPTH_ZERO_TO_ONE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glm/vec4.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glm/mat4x4.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glfwInit</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwWindowHint</span>(GLFW_CLIENT_API, GLFW_NO_API);</span><br><span class="line">    GLFWwindow *window = <span class="built_in">glfwCreateWindow</span>(<span class="number">800</span>, <span class="number">600</span>, <span class="string">&quot;Vulkan window&quot;</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> extensionCount = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vkEnumerateInstanceExtensionProperties</span>(<span class="literal">nullptr</span>, &amp;extensionCount, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; extensionCount &lt;&lt; <span class="string">&quot; extensions supported\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    glm::mat4 matrix;</span><br><span class="line">    glm::vec4 vec;</span><br><span class="line">    <span class="keyword">auto</span> test = matrix * vec;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwDestroyWindow</span>(window);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwTerminate</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果成功打开窗口，则配置完成。</p>]]></content>
    
    
    <categories>
      
      <category>tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CMake</tag>
      
      <tag>VSCode</tag>
      
      <tag>vcpkg</tag>
      
      <tag>Vulkan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Control插件</title>
    <link href="/1919/08/10/contral/"/>
    <url>/1919/08/10/contral/</url>
    
    <content type="html"><![CDATA[<h1 id="Control"><a href="#Control" class="headerlink" title="Control"></a>Control</h1><p>一个极其极其极其简单的基于 mirai 和 mirai-console 的聊天控制Bot的mirai-console插件<br><a href="https://github.com/Catfootbeats/mirai-contral">项目地址</a><br><a href="https://github.com/Catfootbeats/mirai-contral/releases">下载地址</a></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>首先在config\xyz.catfootbeats.control\Setting.yml里设置模式和主人ID<br>(设置完成后需要重启mirai-console)</p><ul><li><code>/ctrl help</code>获取帮助</li><li><code>/ctrl send &lt;消息&gt; &lt;目标群(空时为本群)&gt;</code>让Bot在&lt;目标群&gt;发送&lt;消息&gt;</li><li><code>/recall &lt;引用&gt;</code> 撤回Bot自己的消息</li></ul><p>p.s.初次尝试写插件，项目里n个if else，很多地方也很拙劣，如果有什么问题或建议还请各位大佬指出ヾ(•ω•&#96;)o</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
